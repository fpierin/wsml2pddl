goal _"http://example.org/service/WeatherInnsbruck"

importsOntology {
	_"http://example.org/ontology/Location",
	_"http://example.org/ontology/Weather"
	}
	
capability
	postcondition
		annotations
			dc#description hasValue "I want to know the weather forecast for Innsbruck."
		endAnnotations
	
	definedBy
		?forecast[hasLocation hasValue loc#Innsbruck] memberOf WeatherForecast.
		
		
/* 

Traduz para o seguinte PDDL

(define (domain xxx )

	;; predicados são as propriedades dos objetos que nos interessam que pode ser verdaderas ou falsas
	(:predicates
	
	;; Actions/Operators são as maneiras que existem de mudar o estado do mundo
	(:actions
)



(define (problem http://example.org/service/WeatherInnsbruck)

	// ontologias
	(:domain ???)
	
	;; Objetos são as coisas que nos interessam dentro do contexto do mundo.
	(:objects Innsbruck) 
	
	;; InitState é o estado inicial que define como o mundo se encontra.
	(:init state
	
	
	;; Goal são as propriedades que queremos que sejam verdadeiras
	; @dc#description: I want to know the weather forecast for Innsbruck.
	(:goal (and (?forecast WeatherForecast)
				(?forecast.hasLocation Innsbruck)
			)
	)
) 



*/

/*
(define (problem pb4)
    (:domain gripper)
  	(:objects roomA roomB Ball1 Ball2 Ball3 Ball4  Ball5 Ball6 Ball7 Ball8 left right)
	(:init 
		(room roomA)
		(room roomB)
		(ball Ball1)
		(ball Ball2)
		(ball Ball3)
		(gripper right)
		(at-robby roomA) 
		(free left) 
		(free right)  
		(at Ball1 roomA)
		(at Ball2 roomA)
		(at Ball8 roomA))
	(:goal (and (at Ball1 roomB) 
		(at Ball2 roomB)
        (at Ball3 roomB)
        (at Ball4 roomB)
        (at Ball5 roomB) 
        (at Ball6 roomB)
        (at Ball7 roomB) 
        (at Ball8 roomB)))
 )
 */

/*
(define (domain gripper)
(:requirements :strips)
(:predicates (room ?r)
             (ball ?b)
             (gripper ?g)
             (at-robby ?r)
             (at ?b ?r)
             (free ?g)
             (carry ?o ?g))

	(:action move
		:parameters  (?from ?to)
		:precondition (and  (room ?from) (room ?to) (at-robby ?from))
		:effect (and  (at-robby ?to) (not (at-robby ?from))))
		
	(:action pick
		:parameters (?obj ?room ?gripper)
		:precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                     (at ?obj ?room) (at-robby ?room) (free ?gripper))
		:effect (and (carry ?obj ?gripper) (not (at ?obj ?room)) 
              (not (free ?gripper))))
 
	(:action drop
		:parameters  (?obj  ?room ?gripper)
		:precondition  (and  (ball ?obj) (room ?room) (gripper ?gripper)
                     (carry ?obj ?gripper) (at-robby ?room))
	:effect (and (at ?obj ?room) (free ?gripper) (not (carry ?obj ?gripper))))
)

*/
